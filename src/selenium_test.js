import { By, Builder, until, Select, Browser } from 'selenium-webdriver';
import assert from 'assert';

const BASE_URL = 'http://localhost:5173/';

/**
 * Function to clear and input data into a field
 */
async function inputField(element, data) {
    await element.clear();
    await element.sendKeys(data);
}

/**
 * Function to check if an element has the required attribute
 */
async function isRequired(element) {
    try {
        let required = await element.getAttribute("required");
        return required !== null;
    } catch (error) {
        console.error(`‚ö†Ô∏è Error checking required attribute: ${error.message}`);
        return false;
    }
}

/**
 * Ki·ªÉm th·ª≠ to√†n b·ªô form ƒëƒÉng nh·∫≠p
 */
async function testLoginForm(driver) {
    try {
        const user = await driver.findElementById(By.xpath('//*[@id="userDropdown"]/text()'))
        console.log(`User already logged in!`);

        return user != null;
    } catch (error) {
        console.log("User is not logged in!");
    }

    // Test cases g·ªìm c·∫£ username & password
    const testCases = [
        { username: "", password: "", expectedError: "Y√™u c·∫ßu nh·∫≠p t√™n ƒëƒÉng nh·∫≠p v√† m·∫≠t kh·∫©u." },
        { username: "", password: "wrongpass", expectedError: "Y√™u c·∫ßu nh·∫≠p t√™n ƒëƒÉng nh·∫≠p v√† m·∫≠t kh·∫©u." },
        { username: "user@#$%", password: "", expectedError: "Y√™u c·∫ßu nh·∫≠p t√™n ƒëƒÉng nh·∫≠p v√† m·∫≠t kh·∫©u." },
        { username: "user@#$%", password: "short", expectedError: "T√™n ƒëƒÉng nh·∫≠p ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng" },
        { username: "admin", password: "wrongpass", expectedError: "T√™n ƒëƒÉng nh·∫≠p ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng" },
        { username: "admin", password: "admin", expectedError: "ƒêƒÉng nh·∫≠p th√†nh c√¥ng!" }
    ];

    // Ch·ªù ƒë·∫øn trang ƒëƒÉng nh·∫≠p
    await driver.wait(until.elementLocated(
        By.xpath('//*[@id="app"]/div/div[1]/div/div/div[3]/div/div[1]/li/a[2]/button')),
        5000
    ).click();

    let usernameInput = await driver.wait(until.elementLocated(By.id("username")), 5000);
    let passwordInput = await driver.findElement(By.id("password"));
    let loginButton = await driver.findElement(By.xpath('//button[@type="submit"]'));

    for (let test of testCases) {
        console.log(`üîÑ Testing: Username = "${test.username}", Password = "${test.password}"`);

        await driver.sleep(1000);
        await inputField(usernameInput, test.username);
        await driver.sleep(500);
        await inputField(passwordInput, test.password);
        await loginButton.click();

        await driver.sleep(500); // Ch·ªù x·ª≠ l√Ω validation

        let errorMessageElement = await driver.findElement(By.css(".alert"));
        let actualErrorMessage = await errorMessageElement.getText();

        if (await isRequired(usernameInput) && test.username === '') {
            assert.strictEqual(actualErrorMessage, test.expectedError, `‚ùå Expected "${test.expectedError}", but got "${actualErrorMessage}"`);
            console.log(`‚úÖ Passed: ${actualErrorMessage}`);
            continue;
        }

        if (await isRequired(passwordInput) && test.password === '') {
            assert.strictEqual(actualErrorMessage, test.expectedError, `‚ùå Expected "${test.expectedError}", but got "${actualErrorMessage}"`);
            console.log(`‚úÖ Passed: ${actualErrorMessage}`);    
            continue;
        }

        try {
            let errorElement = await driver.wait(
                until.elementLocated(
                    By.xpath('//*[@id="app-content"]/div/form/div[4]/div'),
                    3000
                )
            );
            let errorText = await errorElement.getText();

            assert.strictEqual(errorText, test.expectedError, `‚ùå Expected "${test.expectedError}", but got "${errorText}"`);
            console.log(`‚úÖ Passed: ${test.expectedError}`);
        } catch (error) {
            console.error(`‚ùå Failed: ${error.message}`);
        }
    }

    return true;
}

async function testUploadForm(driver) {
    // Ch·ªù ƒë·∫øn trang upload
    await driver.wait(until.elementLocated(
        By.xpath('//*[@id="app"]/div/div[1]/div/div/div[3]/div/div[1]/li/a/button')),
        10000
    ).click();

    // Test cases
    const testCases = [
        // Missing title
        // { title: "", category: 1, filename: "F:\\Nam4\\ChuyenDeCNPM\\TestingSoftware\\public\\file_test\\document.pdf", description: "No title test", expectedError: "Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin." },

        // // Missing category
        // { title: "No Category", category: null, filename: "F:\\Nam4\\ChuyenDeCNPM\\TestingSoftware\\public\\file_test\\document.pdf", description: "No category test", expectedError: "Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin." },

        // // Missing file
        // { title: "No File", category: 1, filename: "", description: "No file selected", expectedError: "Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin." },

        // // Missing description
        // // { title: "No Description", category: 1, filename: "F:\\Nam4\\ChuyenDeCNPM\\TestingSoftware\\public\\file_test\\document.pdf", description: "", expectedError: "T√†i li·ªáu ƒë√£ ƒë∆∞·ª£c upload th√†nh c√¥ng!" },

        
        // { title: "Invalid File", category: 1, filename: "F:\\Nam4\\ChuyenDeCNPM\\TestingSoftware\\public\\file_test\\toolbox-installer-HdzdVevku9km_fZhvAmrcQ.exe", description: "", expectedError: "Ch·ªâ cho ph√©p upload file PDF." },
        
        // // File in an unsupported format (e.g., .jpg)
        // { title: "Invalid Image File", category: 1, filename: "F:\\Nam4\\ChuyenDeCNPM\\TestingSoftware\\public\\file_test\\image.jpg", description: "Image file test", expectedError: "Ch·ªâ cho ph√©p upload file PDF." },

        // // File in an unsupported format (e.g., .docx)
        // { title: "Invalid Word File", category: 1, filename: "F:\\Nam4\\ChuyenDeCNPM\\TestingSoftware\\public\\file_test\\document.docx", description: "Word file test", expectedError: "Ch·ªâ cho ph√©p upload file PDF." },

        // File without an extension
        { title: "No Extension", category: 1, filename: "F:\\Nam4\\ChuyenDeCNPM\\TestingSoftware\\public\\file_test\\file_without_extension", description: "No extension test", expectedError: "Ch·ªâ cho ph√©p upload file PDF." },
        
        { title: "Valid PDF", category: 1, filename: "F:\\Nam4\\ChuyenDeCNPM\\TestingSoftware\\public\\file_test\\document.pdf", description: "Test upload PDF", expectedError: "T√†i li·ªáu ƒë√£ ƒë∆∞·ª£c upload th√†nh c√¥ng!" },
        // Special characters in title
        { title: "Title@#$%^&*", category: 1, filename: "F:\\Nam4\\ChuyenDeCNPM\\TestingSoftware\\public\\file_test\\document.pdf", description: "Special characters in title", expectedError: "T√†i li·ªáu ƒë√£ ƒë∆∞·ª£c upload th√†nh c√¥ng!" },
        // File with uppercase extension
        { title: "Uppercase Extension", category: 1, filename: "F:\\Nam4\\ChuyenDeCNPM\\TestingSoftware\\public\\file_test\\document.pdf", description: "Uppercase extension test", expectedError: "T√†i li·ªáu ƒë√£ ƒë∆∞·ª£c upload th√†nh c√¥ng!" },

        // Upload same file twice
        { title: "Duplicate Upload", category: 1, filename: "F:\\Nam4\\ChuyenDeCNPM\\TestingSoftware\\public\\file_test\\document.pdf", description: "Upload same file twice", expectedError: "T√†i li·ªáu ƒë√£ ƒë∆∞·ª£c upload th√†nh c√¥ng!" },

        // Title too long
        // { title: "a".repeat(300), category: 1, filename: "D:\\Downloads\\document.pdf", description: "Long title test", expectedError: "Ti√™u ƒë·ªÅ qu√° d√†i." }
    ];
    // Locate form elements  
    let titleInput = await driver.wait(until.elementLocated(By.id("title")), 5000);
    let categoryDropdown = await driver.findElement(By.id("categories"));
    let fileInput = await driver.findElement(By.id("formFile"));
    let descriptionInput = await driver.findElement(By.xpath('//*[@id="app-content"]/div/div[2]/div/form/div/div[4]/textarea'));
    let submitButton = await driver.findElement(By.xpath('//*[@id="app-content"]/div/div[2]/div/form/div/div[5]/button'));
   
    for (let test of testCases) {
        await driver.sleep(2000);
        console.log(`üîÑ Testing file: "${test.filename}"`);

        // Cu·ªôn ƒë·∫øn ph·∫ßn t·ª≠ ƒë·ªÉ ƒë·∫£m b·∫£o n√≥ n·∫±m trong khung nh√¨n
        await driver.executeScript("arguments[0].scrollIntoView(true);", submitButton);

        await driver.sleep(500);
        await titleInput.clear();
        await descriptionInput.clear();
        // Nh·∫≠p th√¥ng tin
        await titleInput.sendKeys(test.title);
        // Nh·∫≠p m√¥ t·∫£  
        await driver.executeScript("arguments[0].value = '';", descriptionInput);
        await descriptionInput.sendKeys(test.description);

        // Nh·∫•n submit
        await submitButton.click();
        await driver.sleep(1000); // Ch·ªù x√°c nh·∫≠n

        let messageElement = await driver.findElement(By.css(".alert"));
        let actualErrorMessage = await messageElement.getText();

        if (await isRequired(titleInput) && test.title === '') {
            assert.strictEqual(actualErrorMessage, test.expectedError, `‚ùå Expected "${test.expectedError}", but got "${actualErrorMessage}"`);
            console.log("‚úÖ Passed: Ti√™u ƒë·ªÅ kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.");
            continue;
        }

        if (test.category === null || test.category === undefined) {
            assert.strictEqual(actualErrorMessage, test.expectedError, `‚ùå Expected "${test.expectedError}", but got "${actualErrorMessage}"`);
            console.log("‚úÖ Passed: Vui l√≤ng ch·ªçn danh m·ª•c.");
            continue;
        }

        // Ch·ªçn danh m·ª•c  
        let categoryOption = await categoryDropdown.findElement(By.css(`option[value='${test.category}']`));
        await categoryOption.click();

        if (test.filename === undefined || test.filename === '' || test.filename === null) {
            assert.strictEqual(actualErrorMessage, test.expectedError, `‚ùå Expected "${test.expectedError}", but got "${actualErrorMessage}"`);
            console.log("‚úÖ Passed: Vui l√≤ng ch·ªçn file ƒë·ªÉ upload.");
            continue;
        }

        // X·ª≠ l√Ω upload file  
        try {
            await fileInput.sendKeys(test.filename);
        } catch (error) {
            console.error(`‚ùå Failed to upload file: ${error.message}`);
            continue;
        }
        await driver.sleep(10000);

        try {
            console.log("üîç Ki·ªÉm tra alert...");
            
            // Ch·ªù alert xu·∫•t hi·ªán t·ªëi ƒëa 5 gi√¢y
            await driver.wait(until.alertIsPresent(), 5000);
            
            let alert = await driver.switchTo().alert();
            let alertText = await alert.getText();
            console.log(`‚ö†Ô∏è Alert xu·∫•t hi·ªán: "${alertText}"`);
        
            // Ki·ªÉm tra n·ªôi dung alert
            assert.strictEqual(alertText, test.expectedError, `‚ùå Expected "${test.expectedError}", but got "${alertText}"`);
            await alert.accept();
            console.log(`‚úÖ Passed: ${test.expectedError}`);
        
            // N·∫øu c√≥ alert th√¨ b·ªè qua c√°c b∆∞·ªõc ti·∫øp theo
            continue;
        } catch (error) {
            console.log("‚ö†Ô∏è Kh√¥ng c√≥ alert xu·∫•t hi·ªán, ti·∫øp t·ª•c ki·ªÉm tra th√¥ng b√°o l·ªói trong trang.");
        }
        
        // Ki·ªÉm tra th√¥ng b√°o th√†nh c√¥ng
        try {
            let successMessage = await driver.wait(
                until.elementLocated(By.xpath('//*[@id="app-content"]/div/div[3]/div/p')),
                // until.elementLocated(By.css(".alert")),
                2000
            );
            let successText = await successMessage.getText();
            assert.strictEqual(successText, test.expectedError, `‚ùå Expected "${test.expectedError}", but got "${successText}"`);
            console.log(`‚úÖ Passed: ${test.expectedError}`);

            // N·∫øu th√†nh c√¥ng, ƒë√≥ng modal
            let modal = await driver.findElement(By.xpath('//*[@id="app-content"]/div/div[3]'));
            if (await modal.isDisplayed()) {
                // üìå Ki·ªÉm tra n·∫øu l√† ph·∫ßn t·ª≠ cu·ªëi c√πng th√¨ tr·ªü v·ªÅ trang Home
                if (testCases.indexOf(test) === testCases.length - 1) {
                    await driver.wait(
                        until.elementLocated(By.xpath('//*[@id="app-content"]/div/div[3]/div/div/a/button')),
                        1500
                    ).click();
                }

                await driver.wait(
                    until.elementLocated(By.xpath('//*[@id="app-content"]/div/div[3]/div/div/button')),
                    1500
                ).click();
            }
        } catch (error) {
            console.error(`‚ùå Failed: ${error.message}`);
        }

        await driver.sleep(3000);
    }
}

/**
 * H√†m ch·∫°y ch√≠nh
 */
async function main() {
    let driver, isLoggedIn;
    try {
        driver = await new Builder().forBrowser(Browser.EDGE).build();
        await driver.get(BASE_URL);
        await driver.manage().window().maximize();

        // Ki·ªÉm th·ª≠ form ƒëƒÉng nh·∫≠p
        isLoggedIn = await testLoginForm(driver);
    } catch (e) {
        console.error("‚ùå Test failed:", e);
    }

    await driver.sleep(5000);

    if (isLoggedIn) {
        console.log("üîÑ Test upload document!");
        await testUploadForm(driver);
    }
}

// Ch·∫°y test
main();
